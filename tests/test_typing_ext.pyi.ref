from . import submodule
from .submodule import F as F, f as f2
from collections.abc import Iterable
import typing
from typing import Optional

@my_decorator
class CustomSignature(Iterable[int]):
    @my_decorator
    def method(self: typing.Self): ...

    @property
    def value(self, /) -> Optional[int]:
        """docstring for getter"""

    @value.setter
    def value(self, value: Optional[int], /) -> None:
        """docstring for setter"""

class Foo:
    pass

FooAlias = Foo

T = typing.TypeVar("T", contravariant=True)

class Wrapper(typing.Generic[T]):
    def __init__(self, arg: T, /) -> None: ...

    def get(self, /) -> T: ...

    def __eq__(self, arg: object, /) -> bool: ...

def f() -> None: ...

f_alias = f

pytree: dict = {'a' : ('b', [123])}
